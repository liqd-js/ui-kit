<style>
    label.Input
    {
        position: relative;
        display: flex;
        flex-direction: row;
        justify-content: center;
        box-sizing: border-box;
        width: var( --form-input-width, var( --form-width, 100% ));
        height: var( --form-input-height, var( --form-height, 48px ));
        border: var( --form-input-border-size, var( --form-border-size, 1px )) solid var( --form-input-border-color, var( --form-border-color, #999 ));
        padding: 0 var( --form-input-padding, var( --form-padding, 7px ));
        font-size: var( --form-input-font-size, var( --form-font-size, 14px ));
        font-family: var( --form-input-font-family, var( --form-font-family, inherit ));
        border-radius: var( --form-input-border-radius, var( --form-border-radius, 2px ));
        margin: var( --form-input-margin, var( --form-margin, 8px 0 ));
        background: var( --form-input-background, var( --form-background, white ));
        
        &.inline
        {
            display: inline-flex;
        }

        >input
        {
            box-sizing: border-box;
            padding: 0;
            margin: 0;
            outline: none;
            border: none;
            font-size: inherit;
            font-family: inherit;
            line-height: 1.4em;
            height: 1.4em;
            background: transparent;
        }

        >span
        {
            position:absolute;
            user-select: none;
            -moz-user-select: none;
            -webkit-user-select: none;
            -ms-user-select: none;
            top: 0;
            left: 0;
            bottom: 0;
            width: 30px;
            background: silver;
            cursor: pointer;

            border-right: 1px solid red;
        }

        &:last-child
        {
            left:100px;
        }

        &[data-label]:before
        {
            content: attr( data-label );
            pointer-events: none;
            color: var( --form-input-label-color, var( --form-label-color, #777 ));
            font-size: var( --form-input-label-font-size, var( --form-label-font-size, 0.75em ));
            line-height: 1.4em;
            height: 1.4em;
        }

        &:focus-within
        {
            border-color: var( --form-input-border-color, var( --form-border-color, var( --form-input-border-focus-color, var( --form-border-focus-color, #1e87f0 ))));

            &:before
            {
                color: var( --form-input-label-focus-color, var( --form-label-focus-color, #1e87f0 ));
            }
        }
    }
</style>
{
    $props.class = ( 'Input ' + ( $props.class || '' )).trim();
    $props.type = $props.type || 'text';
}
<script>
    function NumberChange( event )
    {
        event.stopPropagation();
        event.preventDefault();

        input = event.target.parentNode.querySelector('input');

        input.value = parseInt( input.value ) + 1;

        function fireEvent( event )
        {
            let evt = document.createEvent( 'HTMLEvents' );
            evt.initEvent( event, false, true );
            input.dispatchEvent( evt );
        }

        fireEvent( 'change' );
    }
</script>
<label {[ id, class, style ]...$props } data-label={ $props.label }>
    <span onclick="NumberChange( event )">-</span>
    <input {[ type, name, value, placeholder, on*, data-* ]...$props } />
    <span onclick="NumberChange( event )">+</span>
</label>