<style>
    label.Number
    {
        position: relative;
        display: flex;
        flex-direction: row;
        justify-content: center;
        box-sizing: border-box;
        width: var( --form-number-width, var( --form-width, 100% ));
        min-width: var( --form-number-width, var( --form-width, unset ));
        height: var( --form-number-height, var( --form-height, 48px ));
        border: var( --form-number-border-size, var( --form-border-size, 1px )) solid var( --form-number-border-color, var( --form-border-color, #999 ));
        padding: 0 var( --form-number-padding, var( --form-padding, 7px ));
        font-size: var( --form-number-font-size, var( --form-font-size, 14px ));
        font-family: var( --form-number-font-family, var( --form-font-family, inherit ));
        border-radius: var( --form-number-border-radius, var( --form-border-radius, 2px ));
        margin: var( --form-number-margin, var( --form-margin, 8px 0 ));
        background: var( --form-number-background, var( --form-background, white ));
        overflow: hidden;
        -moz-user-select: none;
        -webkit-user-select: none;
        -ms-user-select: none;
        user-select: none;
        
        &.inline
        {
            display: inline-flex;
        }

        >input
        {
            box-sizing: border-box;
            text-align: center;
            padding: 0;
            margin: 0;
            outline: none;
            border: none;
            font-size: inherit;
            font-family: inherit;
            height: calc( var( --form-number-height, var( --form-height, 48px )) - 2 * var( --form-number-border-size, var( --form-border-size, 1px )));
            line-height: calc( var( --form-number-height, var( --form-height, 48px )) - 2 * var( --form-number-border-size, var( --form-border-size, 1px )));
            background: transparent;

            &::-webkit-outer-spin-button,
            &::-webkit-inner-spin-button
            {
                -webkit-appearance: none;
                margin: 0;
            }
        }

        &[data-value] >input
        {
            //visibility: hidden;
            opacity: 0;
        }

        >span
        {
            position:absolute;
            top: 0;
            bottom: 0;
            width: calc( var( --form-number-height, var( --form-height, 48px )) - 2 * var( --form-number-border-size, var( --form-border-size, 1px )));
            height: calc( var( --form-number-height, var( --form-height, 48px )) - 2 * var( --form-number-border-size, var( --form-border-size, 1px )));
            line-height: calc( var( --form-number-height, var( --form-height, 48px )) - 2 * var( --form-number-border-size, var( --form-border-size, 1px )));
            text-align: center;
            font-weight: bold;
            background: #f4f5f5;
            cursor: pointer;
            border-width: 0;
            border-color: var( --form-number-border-color, var( --form-border-color, #999 ));
            border-style: solid;

            &:active
            {
                background: #e7e8e8;
            }

            &.minus
            {
                left: 0;
                border-right-width: var( --form-number-border-size, var( --form-border-size, 1px ));
            }

            &.plus
            {
                right: 0;
                border-left-width: var( --form-number-border-size, var( --form-border-size, 1px ));
            }
        }

        &[data-limit="minimum"] > span.minus, &[data-limit="maximum"] > span.plus
        {
            opacity: 0.5;
            cursor: default;
        }

        &:last-child
        {
            left:100px;
        }

        &:focus-within
        {
            border-color: var( --form-input-border-color, var( --form-border-color, var( --form-input-border-focus-color, var( --form-border-focus-color, #1e87f0 ))));
            
            &[data-value]>input
            {
                opacity: 1;
                //visibility: visible;
            }

            &:after
            {
                display: none;
            }
        }

        &[data-value]:after
        {
            position: absolute;
            text-align: center;
            top: 0;
            left: 0px;
            right: 0px;
            height: calc( var( --form-number-height, var( --form-height, 48px )) - 2 * var( --form-number-border-size, var( --form-border-size, 1px )));
            line-height: calc( var( --form-number-height, var( --form-height, 48px )) - 2 * var( --form-number-border-size, var( --form-border-size, 1px )));
            content: attr( data-value );
            pointer-events: none;
        }
    }
</style>
<script>
    function NumberInputFilter( input )
    {
        if( !input.hasOwnProperty( 'inputFilter' ))
        {
            input.inputFilter = { pattern: /^[+-]?\d*[,.]?\d*$/, value: input.value, selection: { start: input.selectionStart, end: input.selectionEnd }};

            for( let event of [ 'input', 'keydown', 'keyup', 'mousedown', 'mouseup', 'select', 'contextmenu', 'drop' ])
            {
                input.addEventListener( event, function()
                {
                    if( input.inputFilter.pattern.test( input.value ))
                    {
                        input.inputFilter.value = input.value;
                        input.inputFilter.selection.start = input.selectionStart;
                        input.inputFilter.selection.end = input.selectionEnd;
                    }
                    else
                    {
                        input.value = input.inputFilter.value;
                        input.setSelectionRange( input.inputFilter.selection.start, input.inputFilter.selection.end );
                    }
                });
            }
        }
    }

    function NumberChange( event, sign )
    {
        if( !event.isTrusted ){ return }

        event.stopPropagation();
        event.preventDefault();

        var input = event.target.parentNode.querySelector('input'), value = parseFloat( input.value.replace(/,/,'.') );
        var min = input.dataset.hasOwnProperty('min') ? parseFloat( input.dataset.min ) : -Infinity;
        var max = input.dataset.hasOwnProperty('max') ? parseFloat( input.dataset.max ) : Infinity;

        if( typeof sign !== 'undefined' )
        {
            value = Math.round(( parseFloat( value ) + sign * parseFloat( input.dataset.step )) * 100000 ) / 100000;
        }

        input.value = value = Math.max( min, Math.min( max, value ));

        if( input.parentNode.dataset.pattern )
        {
            input.parentNode.dataset.value = input.parentNode.dataset.pattern.replace(/\{\s*value\s*\}/, input.value );
        }

        if( min === value ){ input.parentNode.dataset.limit = 'minimum' }
        else if( max === value ){ input.parentNode.dataset.limit = 'maximum' }
        else{ input.parentNode.removeAttribute( 'data-limit' )}

        function fireEvent( event )
        {
            let evt = document.createEvent( 'HTMLEvents' );
            evt.initEvent( event, false, true );
            input.dispatchEvent( evt );
        }

        fireEvent( 'change' );
    }
</script>
{
    $props.class = ( 'Number ' + ( $props.class || '' )).trim();
    let limit = $props.hasOwnProperty('min') && ( $props.min == $props.value || !$props.hasOwnProperty('value')) ? 'minimum' : ( $props.hasOwnProperty('max') && ( $props.max == $props.value ) ? 'maximum' : undefined );

    <label {[ id, class, style ]...$props } data-label={ $props.label } data-value={ $props.pattern ? $props.pattern.replace(/\{\s*value\s*\}/, $props.value || $props.min || 1 ) : undefined } data-pattern={ $props.pattern } data-limit={ limit }>
        <input {[ name, placeholder, !onchange, on*, data-* ]...$props } type="number" value={ $props.value || $props.min || 1 } onfocus="NumberInputFilter(this);" onchange={'if( event.isTrusted ){ NumberChange( event )}else{' + ( $props.onchange || '' ) + '}'} data-min={ $props.min } data-step={ $props.step || 1 } data-max={ $props.max } />
        <span class="minus" onclick="NumberChange( event, -1 )">-</span>
        <span class="plus" onclick="NumberChange( event, 1 )">+</span>
    </label>
}