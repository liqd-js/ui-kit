<style>
    div.Range
    {
        position:relative;
        width: 100%;
        height: var( --form-range-handler-height, 48px );
        user-select: none;
        overflow: visible;

        &:before, &:after
        {
            content: "";
            position: absolute;
            bottom: 22px;
            height: var( --form-range-bar-height, 6px);
            background: var( --form-range-disabled-background, var(--form-disabled-background, rgba(0,0,0,0.03) ));
            border: var( --form-range-border-width, var(--form-border-width, 1px )) solid  var( --form-range-border-color, var(--form-border-color, #dfe3e9 ));
        }

        &:before
        {
            left: 0; right: 0;
        }

        &:after
        {
            left: var( --rangeslider-selection-left ); right: var( --rangeslider-selection-right );
            background: var( --form-range-focus-border-color, var(--form-focus-border-color, #2ea2f8 ));
            border-left: none; border-right: none;
        }

        >.handle
        {
            position: absolute; bottom: 13px; cursor: pointer;
            height: var( --form-range-handler-height, 24px );
            width: var( --form-range-handler-height, 8px);
            background: var( --form-range-background, var(--form-background, #ffffff ));
            border: var( --form-range-border-width, var(--form-border-width, 1px )) solid  var( --form-range-border-color, var(--form-border-color, #dfe3e9 ));
            border-radius: var( --form-range-border-radius, var(--form-border-radius, 2px ));

            &:before
            {
                content: attr(data-value);
                position: absolute;
                pointer-events: none;
                bottom: -20px;
                text-align: center;
                color: var( --form-range-label-color, var(--form-label-color, #7f8fa4 ));
                font-size: var( --form-range-label-fill-size, var(--form-fill-label-size, 12px ));
                font-weight: bold;
                display: none;
            }
        }
    }
</style>
<script>
    function RangeDrag( handle, event )
    {
        let range = handle.parentNode, eventX = event.screenX, startX = handle.offsetLeft;
        let handles = [...range.querySelectorAll('.handle')], input = range.querySelector('input');
        let value = handles.map( h => parseFloat( h.dataset.value )), index = handles.findIndex( h => h === handle );
        let prev = index > 0 ? handles[ index - 1 ] : null;
        let next = index < handles.length - 1 ? handles[ index + 1 ] : null;

        let min = parseFloat( prev ? prev.dataset.value : range.dataset.min );
        let max = parseFloat( next ? next.dataset.value : range.dataset.max );
        let minX = prev ? prev.offsetLeft + prev.offsetWidth : 0;
        let maxX = ( next ? next.offsetLeft : range.offsetWidth ) - handle.offsetWidth;

        function fireEvent( event )
        {
            let evt = document.createEvent( 'HTMLEvents' );
            evt.initEvent( event, false, true );
            input.dispatchEvent( evt );
        }

        function move( event )
        {
            let x = Math.min( maxX, Math.max( minX, ( startX + ( event.screenX - eventX )))); // TODO sticky

            handle.style.left = x + 'px';
            handle.dataset.value = value[ index ] =  Math.round( min + ( x - minX ) / ( maxX - minX ) * ( max - min )); //TODO decimal / float

            input.value = value.join(':');
            
            fireEvent( 'input' );
        }

        function stop( event )
        {
            document.removeEventListener( event.type === 'touchstart' ? 'touchmove' : 'mousemove', move, true );
            document.removeEventListener( event.type === 'touchstart' ? 'touchend' : 'mouseup', stop, true );

            fireEvent( 'change' );
        }

        document.addEventListener( event.type === 'touchstart' ? 'touchmove' : 'mousemove', move, true );
        document.addEventListener( event.type === 'touchstart' ? 'touchend' : 'mouseup', stop, true );

        event.preventDefault();
        event.stopPropagation();
    }

    function Range_update( range, options )
    {
        var value = range.querySelector('input').value.split(':').map( v => v ? parseFloat( v ) : undefined );
        let handles = range.querySelectorAll('.handle');
        var min = parseFloat( options.hasOwnProperty('min') ? options.min : range.dataset.min ), max = parseFloat( options.hasOwnProperty('max') ? options.max : range.dataset.max );
        var from = Math.min( max, Math.max( min, parseFloat( options.hasOwnProperty('from') ? options.from : ( value[0] !== undefined ? value[0] : -Infinity ))));
        var to = Math.max( min, Math.min( max, parseFloat( options.hasOwnProperty('to') ? options.to : ( value[1] !== undefined ? value[1] : Infinity ))));
        var fromX = 'calc( ' + (( from - min ) / ( max - min )) +  ' * ( 100% - 10px ))', toX = 'calc( ' + (( to - min ) / ( max - min )) +  ' * ( 100% - 10px ))';

        range.setAttribute( 'data-min', min );
        range.setAttribute( 'data-max', max );
        handles[0].setAttribute( 'data-value', from );
        handles[1].setAttribute( 'data-value', to );
        range.querySelector('input').value = from + ':' + to;
        handles[0].style.left = fromX;
        handles[1].style.left = toX;
    }
</script>
{
    let min = parseFloat( $props.min ), max = parseFloat( $props.max );
    let from = parseFloat( $props.from !== undefined ? $props.from : $props.min ), to = parseFloat( $props.to !== undefined ? $props.to : $props.max );
    let fromX = 'calc( ' + (( from - min ) / ( max - min )) +  ' * ( 100% - 10px ))', toX = 'calc( ' + (( to - min ) / ( max - min )) +  ' * ( 100% - 10px ))';

    <div class="Range" data-min={ $props.min } data-max={ $props.max }>
        <input type="hidden" {[ name, on* ]...$props } value={ from + ':' + to }/>
        <div class="handle" style={ 'left:' + fromX } onmousedown="RangeDrag( this, event );" ontouchstart="RangeDrag( this, event );" data-value={ from }></div>
        <div class="handle" style={ 'left:' + toX } onmousedown="RangeDrag( this, event );" ontouchstart="RangeDrag( this, event );" data-value={ to }></div>
    </div>
}
